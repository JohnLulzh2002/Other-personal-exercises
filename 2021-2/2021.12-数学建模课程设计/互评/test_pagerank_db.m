clc;
clear

num_per= 10;

format long e;
% num_stu= 75;
% data_stu= zeros(num_stu, num_per);
% for i= 1: num_per
%     while 1
%         x= randperm(num_stu);
%         temp=0;
%         for j= 1:num_stu
%             if x(j)==j
%                 temp=1;
%                 break;
%             end
%         end
%         if ~temp
%             break;
%         end
%     end
%     data_stu(:, i)= x;
% end

data_stu= [
4	59	124	24	59	98	2	12	79	79
108	34	79	13	31	53	62	67	149	135
73	103	4	125	85	95	5	18	131	96
28	112	102	48	143	32	133	86	60	77
73	139	76	32	130	117	8	22	94	136
10	7	118	92	25	66	43	101	146	144
117	114	109	115	135	55	46	94	62	87
31	104	85	100	39	28	89	94	115	36
110	106	23	127	134	99	54	133	135	10
113	29	75	22	88	13	6	148	5	87
142	141	1	27	51	138	93	77	78	137
122	25	17	128	6	142	99	16	68	86
88	38	76	48	47	68	46	136	129	143
148	119	83	109	97	63	107	4	45	56
141	110	123	57	23	76	78	84	147	120
63	13	78	41	30	74	95	61	37	127
35	68	79	131	112	55	18	18	125	12
20	134	65	121	19	15	141	69	42	62
127	80	25	28	109	29	8	48	13	31
7	54	29	98	41	118	45	45	17	68
60	24	6	65	113	71	75	42	27	124
27	6	60	75	124	71	65	42	113	113
46	106	130	137	137	123	48	4	112	93
38	149	136	15	118	89	110	60	30	50
67	150	106	66	128	45	136	98	43	42
125	55	138	72	109	54	143	129	72	97
21	21	29	69	20	10	10	95	14	144
73	29	119	99	78	128	15	16	144	72
93	92	141	18	90	91	44	48	16	36
20	4	147	105	28	107	83	4	104	136
93	60	121	97	101	39	49	92	41	7
25	46	106	112	57	52	4	113	113	2
112	118	105	114	23	116	2	146	43	47
85	140	38	100	139	9	16	66	135	16
85	50	122	42	14	63	120	147	81	5
122	43	90	108	2	39	82	142	71	91
68	71	122	95	86	64	65	130	79	91
66	18	35	52	150	41	15	98	140	102
38	88	120	13	63	12	96	76	32	40
88	61	48	3	95	9	112	87	146	7
100	140	63	125	43	51	90	75	76	24
148	20	142	57	20	135	145	65	140	123
130	14	81	80	1	8	63	121	111	10
140	25	63	129	143	132	53	139	61	6
142	104	62	125	38	34	18	47	101	82
103	105	119	29	59	51	33	45	94	144
20	148	70	23	27	109	44	62	89	107
110	84	7	67	2	3	118	145	64	94
137	27	52	120	45	86	70	135	19	61
90	80	65	126	86	5	143	129	116	77
79	27	35	8	7	33	118	21	15	128
43	134	67	150	108	114	30	33	136	32
14	69	114	107	16	102	117	85	57	127
134	125	58	111	104	88	128	129	84	77
9	54	3	87	71	74	36	138	22	148
12	8	102	110	25	111	98	41	119	120
35	117	133	90	23	108	71	99	146	91
115	124	110	29	92	117	132	130	90	61
100	53	134	34	9	139	110	31	86	86
101	56	144	57	108	36	141	149	75	35
121	67	40	14	150	43	122	110	72	149
2	73	115	4	17	114	77	62	62	62
26	127	30	28	48	66	102	24	32	87
133	23	54	17	106	19	69	143	52	26
22	47	47	65	71	128	31	4	119	120
58	41	55	74	62	3	37	19	40	57
122	127	150	39	83	59	48	12	138	132
26	39	55	36	149	23	15	12	56	72
141	125	126	49	41	75	6	87	50	84
132	49	58	46	139	83	39	28	107	102
127	34	38	53	104	116	54	56	64	86
49	49	108	51	97	17	4	59	107	146
121	80	107	44	87	6	21	19	3	3
21	107	6	44	3	8	121	7	19	80
100	124	135	17	59	22	31	29	48	96
35	30	81	21	69	85	114	63	56	135
150	125	83	76	78	50	30	69	57	75
134	26	34	147	142	67	41	143	144	144
103	137	84	11	79	93	82	26	53	56
37	68	49	128	75	33	33	14	126	115
127	127	18	52	92	106	99	57	12	126
38	106	146	81	50	77	126	3	10	10
54	18	75	134	105	100	1	84	77	24
105	145	108	119	13	17	131	33	129	64
13	37	68	45	129	101	138	138	98	136
105	120	6	83	145	89	138	135	27	80
66	148	37	78	70	131	116	16	147	7
117	111	118	105	20	12	99	42	36	5
137	137	92	67	82	91	9	129	111	132
141	80	67	58	66	124	3	62	15	50
140	59	27	45	123	150	61	120	101	87
35	11	68	58	13	105	9	30	5	126
19	48	98	25	55	131	128	47	66	80
21	28	70	70	132	126	108	114	84	107
140	25	26	93	111	138	57	114	146	81
100	141	112	55	14	50	53	10	81	13
91	132	45	40	53	145	150	106	146	87
85	68	92	113	97	11	147	132	96	32
105	71	103	76	63	128	92	64	89	89
37	109	46	118	34	16	72	50	40	40
58	25	70	78	21	1	5	66	72	87
58	52	85	93	117	93	80	77	44	13
100	103	111	111	11	128	65	30	43	149
138	67	34	53	105	117	98	142	139	56
118	26	38	95	74	74	124	116	123	143
8	25	88	70	81	56	145	87	116	122
142	26	121	7	145	96	1	71	42	47
14	78	2	24	58	52	52	116	136	136
73	42	93	115	115	23	78	51	66	149
59	73	74	44	44	82	86	116	19	5
93	8	106	58	6	89	123	36	143	64
79	60	121	107	75	42	91	5	145	81
88	121	55	71	1	98	24	32	62	149
55	37	6	100	3	9	96	61	99	24
21	9	21	133	37	126	94	56	129	99
85	113	27	126	52	150	83	77	81	82
134	44	8	27	55	59	89	131	33	32
147	78	70	60	111	49	117	84	33	136
10	2	11	34	119	15	83	94	77	149
74	80	103	106	112	30	102	102	116	10
26	88	22	104	103	133	95	115	9	90
115	70	50	79	148	90	67	28	1	72
96	73	49	8	131	52	88	148	80	40
42	11	83	31	109	54	20	36	143	5
79	29	20	41	58	40	44	148	32	94
41	23	95	141	140	61	101	42	136	130
51	131	31	70	28	117	147	101	11	11
60	93	31	123	15	148	109	104	61	72
140	147	118	46	54	139	3	89	64	86
73	68	130	130	88	78	40	16	12	56
144	83	51	131	11	59	44	50	116	116
113	114	45	91	91	126	14	62	69	12
60	96	54	22	38	119	113	109	109	138
103	147	90	46	107	123	39	133	144	97
39	51	95	91	133	82	43	129	101	32
113	123	149	28	2	19	46	124	74	74
85	35	21	23	142	133	82	82	96	130
104	44	51	122	22	119	18	6	40	69
146	42	48	87	90	98	102	112	111	117
110	63	100	59	90	97	104	150	65	145
74	47	46	36	97	64	144	19	76	37
73	125	92	104	9	122	94	69	127	11
49	94	110	132	146	33	39	130	51	84
 
 ];

idx_elem= unique(data_stu);
num_elem= length(idx_elem);

Adj= zeros(num_elem); % adjacency matrix

[m,n]= size(data_stu);
for i= 1: m
   for j=1: (n-1)
%         pos1= find( idx_elem== data_stu(i, j) );
%         pos2= find( idx_elem== data_stu(i, j+1) );
        for k=(j+1):n
            pos1= find( idx_elem== data_stu(i, j) );
            pos2= find( idx_elem== data_stu(i, k) );
            if pos1~=pos2
                Adj(pos1, pos2)= Adj(pos1, pos2)+ 1;
            end
        end
   end
end

alpha= 0.85;
n= length(Adj);
temp= sum(Adj);
H1= zeros(n);
for i=1:n
    if temp(i)
        H1(:,i)= Adj(:,i)/temp(i);
    else
        H1(:,i)= ones(n,1)/n;
    end
end
H2= ones(n)/n;

B= alpha*H1+ (1-alpha)*H2;

[v,d]= eig(B);
[v(:,1), d(:,1)]
score= v(:,1)/sum(v(:,1))

score= (score- mean(score) )/std(score) *10+ 75;
score= round(score);
pos1= find(score> 100);
score(pos1)= 100;
pos2= find(score< 40);
score(pos2)= 40;

[idx_elem, score]

format;


